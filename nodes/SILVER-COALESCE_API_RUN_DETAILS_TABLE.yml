fileVersion: 1
id: 057402bd-c327-4efd-88ba-3f261898c440
name: COALESCE_API_RUN_DETAILS_TABLE
operation:
  config:
    SQL_Deploy: |-
      CREATE OR REPLACE FUNCTION {{ref('PUBLIC', 'COALESCE_API_RUN_DETAILS_TABLE') }}(RunID NUMBER)
      RETURNS TABLE(
              NODE_ID STRING,
              NODE_NAME STRING, 
              IS_RUNNING BOOLEAN, 
              QUERY_NAME STRING,
              QUERY_START_TIME STRING,
              QUERY_END_TIME STRING,
              QUERY_IS_RUNNING BOOLEAN,
              QUERY_STATUS STRING, 
              QUERY_SUCCESS BOOLEAN,
              QUERY_INSERT NUMBER, 
              QUERY_UPDATE NUMBER,
              QUERY_DELETE NUMBER,
              QUERY_QUERY_ID STRING, 
              QUERY_SQL STRING,
              QUERY_ERROR_STRING STRING,
              QUERY_ERROR_DETAIL STRING)
      language python
      runtime_version=3.8
      handler = 'api_run_details'
      external_access_integrations=(COALESCE_API_INTEGRATION_DB)
      packages = ('snowflake-snowpark-python','requests','pandas')
      secrets = ('token' = COALESCE_API_TOKEN)
      as 
      $$
      import _snowflake
      import requests
      import json
      from pandas import json_normalize 

      class api_run_details:

          session = requests.Session()

          def process(self, RunID):
              token = _snowflake.get_generic_secret_string('token')
              url = "https://app.coalescesoftware.io/api/v1/runs/" + str(RunID) + "/results"
              headers = {
                  "accept": "application/json",
                  "authorization": "Bearer " + token
              }
              response = requests.get(url, headers=headers)
              data = json.loads(response.text)
              df_data = json_normalize(data['data'], record_path='queryResults', meta=['nodeID','name','isRunning'], record_prefix='query_')
              df_data['query_rowsInserted'] = df_data.get('query_rowsInserted', 0)
              df_data['query_rowsUpdated'] = df_data.get('query_rowsUpdated', 0)  
              df_data['query_rowsDeleted'] = df_data.get('query_rowsDeleted', 0) 
              df_data['query_rowsInserted'] = df_data['query_rowsInserted'].fillna(0)
              df_data['query_rowsUpdated'] = df_data['query_rowsUpdated'].fillna(0)
              df_data['query_rowsDeleted'] = df_data['query_rowsDeleted'].fillna(0)
              df_data['query_query_id'] = df_data.get('query_queryid', 'N/A')  
              df_data['query_error.errorString'] = df_data.get('query_error.errorString', 'N/A')  
              df_data['query_error.errorDetail'] = df_data.get('query_error.errorDetail', 'N/A')   
              for index, row in df_data.iterrows():
                  yield(row['nodeID'],
                      row['name'],
                      row['isRunning'],
                      row['query_name'],
                      row['query_startTime'],
                      row['query_endTime'],
                      row['query_isRunning'],
                      row['query_status'],
                      row['query_success'],
                      row['query_rowsInserted'],
                      row['query_rowsUpdated'],
                      row['query_rowsDeleted'],
                      row['query_query_id'],
                      row['query_sql'],
                      row['query_error.errorString'],
                      row['query_error.errorDetail'])

      $$;
       
    SQL_Run1: ""
  database: ""
  deployEnabled: true
  description: ""
  isMultisource: false
  locationName: SILVER
  materializationType: table
  metadata:
    appliedNodeTests: []
    columns: []
    cteString: ""
    enabledColumnTestIDs: []
    sourceMapping:
      - aliases: {}
        customSQL:
          customSQL: ""
        dependencies: []
        join:
          joinCondition: ""
        name: COALESCE_API_RUN_DETAILS_TABLE
        noLinkRefs: []
  name: COALESCE_API_RUN_DETAILS_TABLE
  overrideSQL: false
  schema: ""
  sqlType: "80"
  type: sql
  version: 1
type: Node
